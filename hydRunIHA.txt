library("RODBC", lib.loc="C:/R/R-3.5.0/library")
library("IHA", lib.loc="C:/R/R-3.5.0/library")
library("dataRetrieval", lib.loc="C:/R/R-3.5.0/library")
library("EflowStats", lib.loc="C:/R/R-3.5.0/library")
library("tibble", lib.loc="C:/R/R-3.5.0/library")
library("lubridate", lib.loc="C:/R/R-3.5.0/library")
library("dplyr", lib.loc="C:/R/R-3.5.0/library")

rowstowrite<-196
currentrow<-1

ch <- odbcConnect("Hydro")
POR2run<-sqlFetch(ch,"dbo.vw_site_no_X_PORs_IHA",as.is = c(TRUE), stringsAsFactors = FALSE)
siteInfo<-sqlFetch(ch,"dbo.tbl_siteInfo",as.is = c(TRUE), stringsAsFactors = FALSE)
MasterPORs<-sqlFetch(ch,"dbo.tlu_PORs",as.is = c(TRUE), stringsAsFactors = FALSE)
BasePORs<-sqlFetch(ch,"dbo.xtab_site_no_X_PORs_Base",as.is = c(TRUE), stringsAsFactors = FALSE)
odbcClose(ch)

colnames(MasterPORs)[5] <- "AnalysisStartDate"
colnames(MasterPORs)[6] <- "AnalysisEndDate"

POR2run<-merge(POR2run,MasterPORs,by="POR_ID")
POR2run<-merge(POR2run,siteInfo,by="siteInfoID")

POR2run$AnalysisStartDate<-ymd(as.Date(POR2run$AnalysisStartDate))
POR2run$AnalysisEndDate<-ymd(as.Date(POR2run$AnalysisEndDate))

# Start Loop
repeat
{

ch <- odbcConnect("Hydro")
RunIHA<-sqlFetch(ch,"dbo.vw_IHA_by_AnalysisPORID",as.is = c(TRUE), stringsAsFactors = FALSE)
odbcClose(ch)

POR2run<-anti_join(POR2run,RunIHA,by="AnalysisPORID")

#reset variables from last run
if (exists ('dailyQ')) {rm(dailyQ)}
if (exists ('dailyQClean')) {rm(dailyQClean)}
if (exists ('year_type')) {rm(year_type)}
if (exists ('StatsOut')) {rm(StatsOut)}
if (exists ('sdate')) {rm(sdate)}
if (exists ('sn')) {rm(sn)}
if (exists ('ed')) {rm(ed)}
if (exists ('start_year')) {rm(start_year)}
if (exists ('AnalysisPORID')) {rm(AnalysisPORID)}
if (exists ('IHAGroup1')) {rm(IHAGroup1)}
if (exists ('IHAGroup2')) {rm(IHAGroup2)}
if (exists ('IHAGroup3')) {rm(IHAGroup3)}
if (exists ('IHAGroup4')) {rm(IHAGroup4)}
if (exists ('IHAGroup5')) {rm(IHAGroup5)}

sn<-POR2run[currentrow,10]
year_type<-"water"
sdate<-POR2run[currentrow,7]
sdate=as.Date(sdate)
ed<-POR2run[currentrow,8]
ed=as.Date(ed)
AnalysisPORID<-POR2run[currentrow,3]
start_year<-POR2run[currentrow,5]
totalrows<-nrow(POR2run)


#Pull the data and convert to a zoo object

dailyQ <- readNWISdv(siteNumber = sn, parameterCd = "00060", startDate = sdate, endDate = ed)
dailyQZoo=zoo(as.numeric(dailyQ$X_00060_00003),order.by=as.Date(dailyQ$Date))

#Group 1
IHAGroup1<-group1(dailyQZoo,year=year_type)

#Group 2
IHAGroup2<-try(group2(dailyQZoo,year=year_type,mimic.tnc=T))

if (class(IHAGroup2)=="try-error"){
	IHAGroup2<-group2(dailyQZoo,year=year_type,mimic.tnc=F)
	PORQualOut<-data.frame(cbind(PORQualifierID=6,AnalysisPORID=AnalysisPORID))
	ch <- odbcConnect("Hydro")
	sqlSave(ch,PORQualOut,"dbo.vw_QualifyPORs",append=TRUE,rownames=FALSE)
	odbcClose(ch)
 }

#Group 3
IHAGroup3<-try(group3(dailyQZoo,year=year_type,mimic.tnc=T))
	if (class(IHAGroup3)=="try-error"){
		IHAGroup3<-try(group3(dailyQZoo,year=year_type,mimic.tnc=F))
		PORQualOut<-data.frame(cbind(PORQualifierID=9,AnalysisPORID=AnalysisPORID))
	  ch <- odbcConnect("Hydro")
	  sqlSave(ch,PORQualOut,"dbo.vw_QualifyPORs",append=TRUE,rownames=FALSE)
	  odbcClose(ch)
		} 

#Group 4
IHAGroup4<-group4(dailyQZoo,year=year_type)

#Group 5
IHAGroup5<-group5(dailyQZoo,year=year_type)

IHAGroup1=rownames_to_column(as.data.frame(IHAGroup1),var="year")
IHAGroup3=rownames_to_column(as.data.frame(IHAGroup3),var="year")
IHAGroup4=rownames_to_column(as.data.frame(IHAGroup4),var="year")
IHAGroup5=rownames_to_column(as.data.frame(IHAGroup5),var="year")

#transform data frames to storable records

StatsOut=merge(x=IHAGroup1, y=IHAGroup2, by="year")
StatsOut=merge(x=StatsOut, y=IHAGroup3, by="year")
StatsOut=merge(x=StatsOut, y=IHAGroup4, by="year")
StatsOut=merge(x=StatsOut, y=IHAGroup5, by="year")

StatsOut2<-cbind(AnalysisPORID=AnalysisPORID, StatsOut, runtime=Sys.time())


# Write Data to Database
ch <- odbcConnect("Hydro")
sqlSave(ch,StatsOut2,"vw_IHA_by_AnalysisPORID",append=TRUE,rownames=FALSE)
odbcClose(ch)

 print(c("row",rowstowrite-currentrow+1))
 currentrow = currentrow+1

 if(currentrow==rowstowrite+1) 
{
 	break
 }
}
