#############
#
# Step 1. Generating the data points to check.
#
############

library("RODBC", lib.loc="C:/R/R-3.4.1/library")
library("reshape2", lib.loc="C:/R/R-3.4.1/library")
library("dataRetrieval", lib.loc="C:/R/R-3.4.1/library")
library("dplyr", lib.loc="C:/R/R-3.4.1/library")

chQAQC1 <- odbcConnect("HydroProtocol")

# Pull 100 Random stations and calculated metrics from database #
StationsToCheck<- sqlFetch(chQAQC1,"qry_QAQC_100stations_IHA", as.is=T)

# Reshape and add columns for recording QAQC results for metric values
QAQC_out<-melt(StationsToCheck, id.vars=1:5, value.name = "ProtocolValue", variable.name="Metric")
QAQC_out["ActualValue"]<-NA
QAQC_out["QualCode"]<-NA

# Reshape and add columns for recording QAQC results for periods of record
QAQC_out2<-distinct(StationsToCheck[1:2])
QAQC_out2["PVS"]<-NA
QAQC_out2["PPE"]<-NA
QAQC_out2["PCE"]<-NA

QAQC_out3<-cbind(StationsToCheck[1:2],StationsToCheck[5:38])

# Write Table back to database
sqlSave(chQAQC1,QAQC_out,"tbl_QC_Test-IHA",append=TRUE)
sqlSave(chQAQC1,QAQC_out2,"tbl_QC_Test-IHA2",append=TRUE)
sqlSave(chQAQC1,QAQC_out3,"tbl_QC_Test-IHA3",append=TRUE)

#Retrieve daily discharge data for periods of record of interest
USGS_fetch<-distinct(StationsToCheck[,c(1:4)])
#Start Loop
	x<-1
	repeat 
{

sn<-USGS_fetch[x,1]
POR<-USGS_fetch[x,2]
sd<-paste0(USGS_fetch[x,3],'-10-01')
sd=as.Date(sd)
ed<-paste0(USGS_fetch[x,4],'-09-30')
ed=as.Date(ed)
dailyQ <- readNWISdv(siteNumber = sn, parameterCd = "00060", startDate = sd, endDate = ed)
dailyQ_out<-dailyQ[,c(3:4)]
filename<-paste0(sn,'_',POR,'_dailydata.txt')

setwd("E:/HydrologyProtocol/IHA_QAQC")
write.table(dailyQ_out,filename,sep="\t",row.names=FALSE,col.names=FALSE)

x = x+1
if(x==101) {break}
}

odbcClose(chQAQC1)


#############
#
# Step 2. Qualify Errors. 
#
############

library("RODBC", lib.loc="C:/R/R-3.4.1/library")
library("reshape2", lib.loc="C:/R/R-3.4.1/library")
library(dplyr)

chQAQC2 <- odbcConnect("HydroProtocol")

# Pull QAQC table with Checked Values #
CheckedDataTable<- sqlFetch(chQAQC2,"qry_QAQC_HIT-FDSS_Step_2", as.is=T)

# Update any fields with different values to MVS code

#Start Loop
	y<-1
	repeat 
{

if(is.na(CheckedDataTable[y,7])==TRUE){CheckedDataTable[y,9]="MCE"}
	
if(is.na(CheckedDataTable[y,7])==FALSE){

	if(!(CheckedDataTable[y,7]==CheckedDataTable[y,8]))
	{
		CheckedDataTable[y,9]="MVS"
	}

}

y = y+1
if(y==17801) {break}
}

CheckedDataTable<-subset(CheckedDataTable, CheckedDataTable$StartYear>0)


#Start Loop
	y<-1
	repeat 
{

if(!is.na(CheckedDataTable[y,7])==TRUE){
if(!is.na(CheckedDataTable[y,9])==TRUE){

if(CheckedDataTable[y,9]=='MVS'){

if(round(CheckedDataTable[y,7], digits=CheckedDataTable[y,10])==CheckedDataTable[y,8]){

		CheckedDataTable[y,9]="MPE"
}
}
}
}
y = y+1
if(y==17801) {break}
}

CheckedDataTable<-subset(CheckedDataTable, CheckedDataTable$StartYear>0)

#Write Tables back to database
sqlSave(chQAQC2,CheckedDataTable,"tbl_QC_Test_Results-HIT-FDSS",append=TRUE)

odbcClose(chQAQC2)

#############
#
# Step 3. Data Quality Evaluation 
#
############

library("RODBC", lib.loc="C:/R/R-3.4.1/library")
library("reshape2", lib.loc="C:/R/R-3.4.1/library")
library(dplyr)

chQAQC3 <- odbcConnect("HydroProtocol")

# Tally Error Code Rates by Metric
QualCodeTally <- CheckedDataTable %>% group_by(Metric,QualCode) %>% tally()
PORCount <- CheckedDataTable %>% group_by(Metric) %>% tally()
QualCodeTally<-merge(QualCodeTally,PORCount,by="Metric")
QualCodeTally["Percentage"]<-(QualCodeTally$n.x/QualCodeTally$n.y)

# Tally Error Code Rates by site_no
QualCodeTally2 <- CheckedDataTable %>% group_by(site_no,QualCode) %>% tally()
StationCount <- CheckedDataTable %>% group_by(site_no) %>% tally()
QualCodeTally2<-merge(QualCodeTally2,StationCount,by="site_no")
QualCodeTally2["Percentage"]<-(QualCodeTally2$n.x/QualCodeTally2$n.y)

sqlSave(chQAQC3,QualCodeTally,"tbl_QC_Test_Results_Summary-HIT-FDSS",append=TRUE)
sqlSave(chQAQC3,QualCodeTally2,"tbl_QC_Test_Results_Summary-HIT-FDSS_2",append=TRUE)

odbcClose(chQAQC3)
